#!/bin/ksh93
#KSH script to simulate "suma" command

typeset do_exec=0
typeset -A fields
fields['DisplayName']=
fields['Action']=Download
fields['RqType']=Latest
fields['RqName']=
fields['DLTarget']=/usr/sys/inst.images
fields['FilterDir']=/usr/sys/inst.images
fields['FilterML']=

typeset -A bff_list

#===============================================
# Usage
#===============================================
function usage
{
    typeset cmd=$(basename $1)
    print "++ Suma fake for tests ++
Usage:
Create, Edit, or Schedule a SUMA task.
        suma { { [-x][-w] } | -s CronSched } [ -a Field=Value ]... [ TaskID ]

List SUMA tasks.
        suma -l [ TaskID ]...

List or Edit the default SUMA task.
        suma -D [ -a Field=Value ]...

List or Edit the SUMA global configuration settings.
        suma -c [ -a Field=Value ]...

Unschedule a SUMA task.
        suma -u TaskID

Delete a SUMA task.
        suma -d TaskID
"
    return 0
}

#===============================================
# error_managment
#===============================================
function error_managment
{
	error_message=""
    if [ ! -z $(echo "${fields['DisplayName']}" | grep "error") ]
    then
        if [ ! -z $(echo "${fields['DisplayName']}" | grep "BSO") ]
        then
            error_message='
CWPKI0022E: SSL HANDSHAKE FAILURE:  A signer with SubjectDN "CN=ASA Temporary Self Signed Certificate" was sent from target host:port "esupport.ibm.com:443".  The signer may need to be added to local trust store  "/var/ecc/data/TrustList.jks" located in SSL configuration alias "null" loaded from SSL configuration file "null".  The extended error message from the SSL handshake exception is: "PKIX path building failed: java.security.cert.CertPathBuilderException: unable to find valid certification path to requested target".

CWPKI0040I: An SSL handshake failure occurred from a secure client.  The server's SSL signer has to be added to the client's trust store.  A retrieveSigners utility is provided to download signers from the server but requires administrative permission.  Check with your administrator to have this utility run to setup the secure environment before running the client.  Alternatively, the com.ibm.ssl.enableSignerExchangePrompt can be enabled in ssl.client.props for "DefaultSSLSettings" in order to allow acceptance of the signer during the connection attempt.
'
        fi
        error_message+="0500-013 Failed to retrieve list from fix server."
    fi
    if [ ! -z $(echo "${fields['DisplayName']}" | grep "not entitled") ]
    then
        error_message="0500-059 Entitlement is required to download.
The system's serial number is not entitled.
Please go to the Fix Central website to download fixes."
    fi
    if [ ! -z $(echo "${fields['DisplayName']}" | grep "up-to-date") ]
    then
        error_message="0500-035 No fixes match your query."
    fi
    if [ "${fields['RqType']}" != "TL" -a "${fields['RqType']}" != "SP" -a "${fields['RqType']}" != "Latest" ]
    then
        error_message="0500-019 The -a flag entry RqType=${fields['RqType']} is not valid."
    fi
    if [ ! -z "$error_message" ]
    then
    	echo $error_message
	    log_file="${fields['DLTarget']}/suma.error"
	    echo "---- $(date) ----" >> $log_file
    	echo $error_message >> $log_file
    	echo "" >> $log_file
    fi   
}

#===============================================
# generate_bff
#===============================================
function generate_bff
{
    error_managment
	bff_list=[]
    if [ "${fields['RqType']}" == "TL" ]
    then
  	    nb=100
    else
        if [ "${fields['RqType']}" == "SP" ]
        then
    	    nb=200
        else
    	    nb=350
        fi
    fi
	let last_value=855000
	for num in `seq 1 $nb`
	do
        let step=$num%4
        if [ $step -eq 0 ]
        then
		offcet=124
        else if [ $step -eq 0 ]
        then
		offcet=73
        else if [ $step -eq 0 ]
        then
		offcet=347
        else
		offcet=276
        fi; fi; fi
		let last_value+=$offcet
		bff_list[$num]=$last_value
	done
}

#===============================================
# run_action
#===============================================
function run_action
{
    action_type=$1
	echo "****************************************"
    if [ $action_type -eq 0 ]
    then
	    echo "Performing preview download."
    else
	    echo "Performing download."
        mkdir -p "${fields['DLTarget']}/installp/ppc/"
    fi
	echo "****************************************"
    generate_bff
    with_failure=$(echo "${fields['DisplayName']}" | grep "failure")
    nb_download=0
    nb_failure=0
    nb_skip=0
	for item in "${bff_list[@]}"
	do
        bff_file="${fields['DLTarget']}/installp/ppc/U$item.bff"
        if [ -f "$bff_file" ]
        then
    		echo "Download SKIPPED: $bff_file" 
            let nb_skip+=1
        else
            if [ ! -z "$with_failure" -a "${item:3:2}" == "72" ]
            then
        		echo "Download FAILED: $bff_file" 
                let nb_failure+=1
            else
                if [ $action_type -eq 1 ]
                then
                    touch $bff_file
                fi
        		echo "Download SUCCEEDED: $bff_file" 
                let nb_download+=1
            fi
        fi
	done
    let size=$nb_download*1000
	echo "Total bytes of updates downloaded: $size"
	echo "Summary:"
	echo "        $nb_download downloaded"
	echo "        $nb_failure failed"
	echo "        $nb_skip skipped"	
    log_file="${fields['DLTarget']}/suma.log"
    echo "---- $(date) ----" >> $log_file
    for key in "${!fields[@]}"
    do
        echo "\t$key : ${fields[$key]}" >> $log_file
    done
	echo "\t\tTotal bytes of updates downloaded: $size" >> $log_file
	echo "\t\t$nb_download downloaded" >> $log_file
	echo "\t\t$nb_failure failed" >> $log_file
	echo "\t\t$nb_skip skipped"	 >> $log_file
    echo "" >> $log_file
}

#=====================================
: Parse command line
#=====================================
while getopts "xws:a:l:Dcu:d:h" opt ; do
    case $opt in
    a) 
IFS='=' read key value <<END
	$OPTARG
END
	   key=$(echo $key)
	   if [ ! -z "$(echo ${!fields[@]} | grep $key)" ]
	   then  
			fields[$key]="$value"
       fi
       ;;
    x) do_exec=1
       ;;
    h) usage $0
       exit 0
       ;;
   \?) echo "Unrecognized parameter -$OPTARG" >&2
       exit 1
       ;;
    :) echo "Option -$OPTARG requires an argument." >&2
       exit 1
       ;;
    esac
done

if [ $do_exec -ne 0 ] 
then
	echo "### SUMA FAKE ###"
    if [ ! -d "${fields['DLTarget']}" ]
    then
        echo "${fields['DLTarget']} must be an existing absolute path."
        echo "OR"
        echo "${fields['DLTarget']} must be the name of a NIM lpp_source."
        echo "0500-049 Task is not valid."
    	exit 1
    fi
    if [ "${fields['Action']}" == 'Preview' ]
	then
		run_action 0
		exit 0
	fi
	if [ "${fields['Action']}" == 'Download' ]
	then
		run_action 1
		exit 0
	fi
	echo "#### BAD ACTION (${fields['Action']}) ####"
	exit 1
fi

echo "#### NOT IMPLEMENTED ####"
exit 1
