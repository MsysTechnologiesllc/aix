require 'fileutils'

task :default => [ :copy_recipes, :install_fake, :run_nim, :deinstall_fake ]

task :toto => [ :copy_recipes, :install_fake, :run_toto, :deinstall_fake ]

task :hello  do
  puts 'Running RAKE for AIX CHEF'
end

# %n returns the file name without the extension and directory portions !
test_nim_list = FileList.new('../test_nim/recipes/*.rb').pathmap("%n")
success = 0
failure = 0
total = 0

##########################################################
## Variable definition
##########################################################

LOG_DIR = Time.new.strftime("%F_%H%M%S")
COOKBOOK_DIR = Dir.pwd + '/../../..'

##########################################################
## Function definition
##########################################################

desc 'Build client.rb file which is used to specify the configuration details for the chef-client.'
def build_config_file(config)
  ## Create LOGS Directory
  FileUtils.mkdir_p(Dir.pwd + '/LOGS/log_' + LOG_DIR )
  ## Fill in client.rb
  File.open("client.rb", "w") do |file|
    file.puts 'cookbook_path "' + Dir.pwd + '/../../.."'
    file.puts 'log_level :info'
    file.puts 'log_location "' + Dir.pwd + '/LOGS/log_' + LOG_DIR + '/'+ config.to_s + '.log"'
    file.puts 'verbose_logging true'
  end
  return 'client.rb'
end

desc 'Parse recipe file to extract expected values'
def parse_expected_values(file)
  puts 'Expected values:'
  expected_values = Hash.new
  File.open(Dir.pwd + '/recipes/' + file + '.rb', "r") do |f|
    f.each_line do |line|
      line.chomp!
      if line =~ /^# (.*?) : (.*?)$/
        key, value = $1, $2.delete('"')
        expected_values[key] = value
		puts "#{key} = #{value}"
      end
    end
  end
  expected_values
end

desc 'Parse log file to check expected values'
def check_expected_values(rc, file, expected)
  success = true
  log_file = Dir.pwd + '/LOGS/log_' + LOG_DIR + '/' + file + '.log'

  if rc.to_i != expected['return code'].to_s.to_i
    success = false
    puts "Expected return code #{expected['return code'].to_s} but has #{rc}"
  end

  unless expected['exception'].to_s == 'nil'
    found = false
    File.open(log_file, "r") do |f|
      f.each_line do |line|
        found = true if line =~ /#{expected['exception'].to_s}/
      end
    end
    unless found
      success = false
      puts "Expected exception #{expected['exception'].to_s} but did not found in #{log_file}"
    end
  end
  
  unless expected['nim cust'].to_s == ''
    found = false
    File.open(log_file, "r") do |f|
      f.each_line do |line|
        found = true if line =~ /#{expected['nim cust'].to_s}/
      end
    end
    unless found
      success = false
      puts "Expected trace #{expected['nim cust'].to_s} but did not found in #{log_file}"
    end
  end

  success
end

##########################################################
## Task definition
##########################################################

desc 'Copy Test recipes to Cookbook recipes'
task :copy_recipes do
  FileUtils.cp_r Dir.pwd + '/recipes/.', COOKBOOK_DIR + '/aix/recipes', :verbose => true
end

desc 'Set up fake nim & suma'
task :install_fake do
  FileUtils.cp '/usr/sbin/nim', '/usr/sbin/nim.old', :verbose => true
  FileUtils.cp Dir.pwd + '/../aix_fake/nim', '/usr/sbin/nim', :verbose => true
  FileUtils.cp '/usr/sbin/suma', '/usr/sbin/suma.old', :verbose => true
  FileUtils.cp Dir.pwd + '/../aix_fake/suma', '/usr/sbin/suma', :verbose => true
end

desc 'Remove fake from machine'
task :deinstall_fake do
  FileUtils.cp '/usr/sbin/nim.old', '/usr/sbin/nim', :verbose => true
  FileUtils.cp '/usr/sbin/suma.old', '/usr/sbin/suma', :verbose => true
end

task :run_toto do
  fl = 'test_nim_sync_multi'
  build_config_file(fl)
  expected_values = parse_expected_values(fl)
  puts '----------------------' + '-' * fl.length + '------'
  puts '----- Running recipe: ' + fl + ' -----'
  puts '----------------------' + '-' * fl.length + '------'
  sh 'chef-client --local-mode -c client.rb --runlist "recipe[aix::' + fl + ']"' do |ok, res|
    puts check_expected_values(res.exitstatus, fl, expected_values) ? "SUCCESS" : "FAILURE"
  end
end

desc 'Run all NIM tests'
task :run_nim do
  puts '/////////////////////////////////////////////////////////////////////'
  puts '                    Running NIM tests'
  puts '/////////////////////////////////////////////////////////////////////'
  test_nim_list.each do |fl|
    build_config_file(fl)
	expected_values = parse_expected_values(fl)
    puts '----------------------' + '-' * fl.length + '------'
    puts '----- Running recipe: ' + fl + ' -----'
    puts '----------------------' + '-' * fl.length + '------'
    sh 'chef-client --local-mode -c client.rb --runlist "recipe[aix::' + fl + ']"' do |ok, res|
      if check_expected_values(res.exitstatus, fl, expected_values)
        success += 1
        total += 1
        puts "SUCCESS"
      else
        failure += 1
        total += 1
        puts "FAILURE"
      end
    end
  end
  puts '------------------'
  puts '----- Report -----'
  puts '------------------'
  percent = 100 * success.to_f / total
  puts "success = #{success}/#{total} (#{percent.round(2)}%)"
end
